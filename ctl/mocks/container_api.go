// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	container "github.com/foldsh/fold/ctl/container"

	mock "github.com/stretchr/testify/mock"
)

// ContainerAPI is an autogenerated mock type for the ContainerAPI type
type ContainerAPI struct {
	mock.Mock
}

// BuildImage provides a mock function with given fields: img
func (_m *ContainerAPI) BuildImage(img *container.Image) error {
	ret := _m.Called(img)

	var r0 error
	if rf, ok := ret.Get(0).(func(*container.Image) error); ok {
		r0 = rf(img)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ContainerLogs provides a mock function with given fields: con
func (_m *ContainerAPI) ContainerLogs(con *container.Container) (*container.LogStream, error) {
	ret := _m.Called(con)

	var r0 *container.LogStream
	if rf, ok := ret.Get(0).(func(*container.Container) *container.LogStream); ok {
		r0 = rf(con)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.LogStream)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*container.Container) error); ok {
		r1 = rf(con)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Context provides a mock function with given fields:
func (_m *ContainerAPI) Context() context.Context {
	ret := _m.Called()

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// CreateNetwork provides a mock function with given fields: net
func (_m *ContainerAPI) CreateNetwork(net *container.Network) error {
	ret := _m.Called(net)

	var r0 error
	if rf, ok := ret.Get(0).(func(*container.Network) error); ok {
		r0 = rf(net)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetContainer provides a mock function with given fields: name
func (_m *ContainerAPI) GetContainer(name string) (*container.Container, error) {
	ret := _m.Called(name)

	var r0 *container.Container
	if rf, ok := ret.Get(0).(func(string) *container.Container); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Container)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImage provides a mock function with given fields: name
func (_m *ContainerAPI) GetImage(name string) (*container.Image, error) {
	ret := _m.Called(name)

	var r0 *container.Image
	if rf, ok := ret.Get(0).(func(string) *container.Image); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkExists provides a mock function with given fields: net
func (_m *ContainerAPI) NetworkExists(net *container.Network) (bool, error) {
	ret := _m.Called(net)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*container.Network) bool); ok {
		r0 = rf(net)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*container.Network) error); ok {
		r1 = rf(net)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewContainer provides a mock function with given fields: name, image, mounts
func (_m *ContainerAPI) NewContainer(name string, image container.Image, mounts ...container.Mount) *container.Container {
	_va := make([]interface{}, len(mounts))
	for _i := range mounts {
		_va[_i] = mounts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name, image)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *container.Container
	if rf, ok := ret.Get(0).(func(string, container.Image, ...container.Mount) *container.Container); ok {
		r0 = rf(name, image, mounts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Container)
		}
	}

	return r0
}

// NewNetwork provides a mock function with given fields: name
func (_m *ContainerAPI) NewNetwork(name string) *container.Network {
	ret := _m.Called(name)

	var r0 *container.Network
	if rf, ok := ret.Get(0).(func(string) *container.Network); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Network)
		}
	}

	return r0
}

// PullImage provides a mock function with given fields: name
func (_m *ContainerAPI) PullImage(name string) (*container.Image, error) {
	ret := _m.Called(name)

	var r0 *container.Image
	if rf, ok := ret.Get(0).(func(string) *container.Image); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveNetwork provides a mock function with given fields: net
func (_m *ContainerAPI) RemoveNetwork(net *container.Network) error {
	ret := _m.Called(net)

	var r0 error
	if rf, ok := ret.Get(0).(func(*container.Network) error); ok {
		r0 = rf(net)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunContainer provides a mock function with given fields: net, con
func (_m *ContainerAPI) RunContainer(net *container.Network, con *container.Container) error {
	ret := _m.Called(net, con)

	var r0 error
	if rf, ok := ret.Get(0).(func(*container.Network, *container.Container) error); ok {
		r0 = rf(net, con)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StopContainer provides a mock function with given fields: con
func (_m *ContainerAPI) StopContainer(con *container.Container) error {
	ret := _m.Called(con)

	var r0 error
	if rf, ok := ret.Get(0).(func(*container.Container) error); ok {
		r0 = rf(con)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
