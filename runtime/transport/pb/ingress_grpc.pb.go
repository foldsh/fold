// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	manifest "github.com/foldsh/fold/manifest"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FoldIngressClient is the client API for FoldIngress service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FoldIngressClient interface {
	// Retrieve the manifest from the service.
	GetManifest(ctx context.Context, in *ManifestReq, opts ...grpc.CallOption) (*manifest.Manifest, error)
	// Ask the service to process an HTTP request.
	DoRequest(ctx context.Context, in *manifest.FoldHTTPRequest, opts ...grpc.CallOption) (*manifest.FoldHTTPResponse, error)
}

type foldIngressClient struct {
	cc grpc.ClientConnInterface
}

func NewFoldIngressClient(cc grpc.ClientConnInterface) FoldIngressClient {
	return &foldIngressClient{cc}
}

func (c *foldIngressClient) GetManifest(ctx context.Context, in *ManifestReq, opts ...grpc.CallOption) (*manifest.Manifest, error) {
	out := new(manifest.Manifest)
	err := c.cc.Invoke(ctx, "/ingress.FoldIngress/GetManifest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foldIngressClient) DoRequest(ctx context.Context, in *manifest.FoldHTTPRequest, opts ...grpc.CallOption) (*manifest.FoldHTTPResponse, error) {
	out := new(manifest.FoldHTTPResponse)
	err := c.cc.Invoke(ctx, "/ingress.FoldIngress/DoRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FoldIngressServer is the server API for FoldIngress service.
// All implementations must embed UnimplementedFoldIngressServer
// for forward compatibility
type FoldIngressServer interface {
	// Retrieve the manifest from the service.
	GetManifest(context.Context, *ManifestReq) (*manifest.Manifest, error)
	// Ask the service to process an HTTP request.
	DoRequest(context.Context, *manifest.FoldHTTPRequest) (*manifest.FoldHTTPResponse, error)
	mustEmbedUnimplementedFoldIngressServer()
}

// UnimplementedFoldIngressServer must be embedded to have forward compatible implementations.
type UnimplementedFoldIngressServer struct {
}

func (UnimplementedFoldIngressServer) GetManifest(context.Context, *ManifestReq) (*manifest.Manifest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManifest not implemented")
}
func (UnimplementedFoldIngressServer) DoRequest(context.Context, *manifest.FoldHTTPRequest) (*manifest.FoldHTTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoRequest not implemented")
}
func (UnimplementedFoldIngressServer) mustEmbedUnimplementedFoldIngressServer() {}

// UnsafeFoldIngressServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FoldIngressServer will
// result in compilation errors.
type UnsafeFoldIngressServer interface {
	mustEmbedUnimplementedFoldIngressServer()
}

func RegisterFoldIngressServer(s grpc.ServiceRegistrar, srv FoldIngressServer) {
	s.RegisterService(&FoldIngress_ServiceDesc, srv)
}

func _FoldIngress_GetManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManifestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoldIngressServer).GetManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ingress.FoldIngress/GetManifest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoldIngressServer).GetManifest(ctx, req.(*ManifestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoldIngress_DoRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(manifest.FoldHTTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoldIngressServer).DoRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ingress.FoldIngress/DoRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoldIngressServer).DoRequest(ctx, req.(*manifest.FoldHTTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FoldIngress_ServiceDesc is the grpc.ServiceDesc for FoldIngress service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FoldIngress_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ingress.FoldIngress",
	HandlerType: (*FoldIngressServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetManifest",
			Handler:    _FoldIngress_GetManifest_Handler,
		},
		{
			MethodName: "DoRequest",
			Handler:    _FoldIngress_DoRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ingress.proto",
}
