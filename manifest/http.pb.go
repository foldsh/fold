// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: http.proto

package manifest

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// All HTTP Methods
type FoldHTTPMethod int32

const (
	FoldHTTPMethod_GET     FoldHTTPMethod = 0
	FoldHTTPMethod_HEAD    FoldHTTPMethod = 1
	FoldHTTPMethod_POST    FoldHTTPMethod = 2
	FoldHTTPMethod_PUT     FoldHTTPMethod = 3
	FoldHTTPMethod_DELETE  FoldHTTPMethod = 4
	FoldHTTPMethod_CONNECT FoldHTTPMethod = 5
	FoldHTTPMethod_OPTIONS FoldHTTPMethod = 6
	FoldHTTPMethod_TRACE   FoldHTTPMethod = 7
	FoldHTTPMethod_PATCH   FoldHTTPMethod = 8
)

// Enum value maps for FoldHTTPMethod.
var (
	FoldHTTPMethod_name = map[int32]string{
		0: "GET",
		1: "HEAD",
		2: "POST",
		3: "PUT",
		4: "DELETE",
		5: "CONNECT",
		6: "OPTIONS",
		7: "TRACE",
		8: "PATCH",
	}
	FoldHTTPMethod_value = map[string]int32{
		"GET":     0,
		"HEAD":    1,
		"POST":    2,
		"PUT":     3,
		"DELETE":  4,
		"CONNECT": 5,
		"OPTIONS": 6,
		"TRACE":   7,
		"PATCH":   8,
	}
)

func (x FoldHTTPMethod) Enum() *FoldHTTPMethod {
	p := new(FoldHTTPMethod)
	*p = x
	return p
}

func (x FoldHTTPMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FoldHTTPMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_http_proto_enumTypes[0].Descriptor()
}

func (FoldHTTPMethod) Type() protoreflect.EnumType {
	return &file_http_proto_enumTypes[0]
}

func (x FoldHTTPMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FoldHTTPMethod.Descriptor instead.
func (FoldHTTPMethod) EnumDescriptor() ([]byte, []int) {
	return file_http_proto_rawDescGZIP(), []int{0}
}

type FoldHTTPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The HTTP Method for the request.
	HttpMethod FoldHTTPMethod `protobuf:"varint,1,opt,name=http_method,json=httpMethod,proto3,enum=http.FoldHTTPMethod" json:"http_method,omitempty"`
	// The full URL of the HTTP request.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// The raw query from the request line, without the '?'
	RawQuery string `protobuf:"bytes,3,opt,name=raw_query,json=rawQuery,proto3" json:"raw_query,omitempty"`
	// The raw fragment from the request line, if any
	Fragment string `protobuf:"bytes,4,opt,name=fragment,proto3" json:"fragment,omitempty"`
	// The version of the HTTP Protocol being used.
	HttpProto *FoldHTTPProto `protobuf:"bytes,5,opt,name=http_proto,json=httpProto,proto3" json:"http_proto,omitempty"`
	// The value of the Host header, which provides the host and port
	// information from the target URI.
	// https://tools.ietf.org/html/rfc7230#section-5.4
	Host string `protobuf:"bytes,6,opt,name=host,proto3" json:"host,omitempty"`
	// The network address of the request sender.
	RemoteAddr string `protobuf:"bytes,7,opt,name=remote_addr,json=remoteAddr,proto3" json:"remote_addr,omitempty"`
	// The request_uri is the unmodified request-target of the
	// Request-Line as sent by the client to the server.
	// https://tools.ietf.org/html/rfc7230#section-3.1.1
	RequestUri string `protobuf:"bytes,8,opt,name=request_uri,json=requestUri,proto3" json:"request_uri,omitempty"`
	// The length, in bytes, of the body.
	ContentLength int64 `protobuf:"varint,9,opt,name=content_length,json=contentLength,proto3" json:"content_length,omitempty"`
	// The body of the HTTP request. This will often be a JSON string
	// but could be anything if the appropriate content type is set
	// in the headers.
	Body []byte `protobuf:"bytes,10,opt,name=body,proto3" json:"body,omitempty"`
	// The HTTP headers.
	Headers map[string]*StringArray `protobuf:"bytes,11,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The parsed path params.
	PathParams map[string]string `protobuf:"bytes,12,rep,name=path_params,json=pathParams,proto3" json:"path_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The parsed query params.
	QueryParams map[string]*StringArray `protobuf:"bytes,13,rep,name=query_params,json=queryParams,proto3" json:"query_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The path specification matched by the router.
	// This is for internal use by fold only.
	Route string `protobuf:"bytes,14,opt,name=route,proto3" json:"route,omitempty"`
}

func (x *FoldHTTPRequest) Reset() {
	*x = FoldHTTPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FoldHTTPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FoldHTTPRequest) ProtoMessage() {}

func (x *FoldHTTPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_http_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FoldHTTPRequest.ProtoReflect.Descriptor instead.
func (*FoldHTTPRequest) Descriptor() ([]byte, []int) {
	return file_http_proto_rawDescGZIP(), []int{0}
}

func (x *FoldHTTPRequest) GetHttpMethod() FoldHTTPMethod {
	if x != nil {
		return x.HttpMethod
	}
	return FoldHTTPMethod_GET
}

func (x *FoldHTTPRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FoldHTTPRequest) GetRawQuery() string {
	if x != nil {
		return x.RawQuery
	}
	return ""
}

func (x *FoldHTTPRequest) GetFragment() string {
	if x != nil {
		return x.Fragment
	}
	return ""
}

func (x *FoldHTTPRequest) GetHttpProto() *FoldHTTPProto {
	if x != nil {
		return x.HttpProto
	}
	return nil
}

func (x *FoldHTTPRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *FoldHTTPRequest) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *FoldHTTPRequest) GetRequestUri() string {
	if x != nil {
		return x.RequestUri
	}
	return ""
}

func (x *FoldHTTPRequest) GetContentLength() int64 {
	if x != nil {
		return x.ContentLength
	}
	return 0
}

func (x *FoldHTTPRequest) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *FoldHTTPRequest) GetHeaders() map[string]*StringArray {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *FoldHTTPRequest) GetPathParams() map[string]string {
	if x != nil {
		return x.PathParams
	}
	return nil
}

func (x *FoldHTTPRequest) GetQueryParams() map[string]*StringArray {
	if x != nil {
		return x.QueryParams
	}
	return nil
}

func (x *FoldHTTPRequest) GetRoute() string {
	if x != nil {
		return x.Route
	}
	return ""
}

type FoldHTTPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The HTTP status code for the response.
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// The body of the HTTP response. As with the Request, it will
	// most often be a JSON string but the headers say what it really is.
	Body []byte `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	// The HTTP headers for the response.
	Headers map[string]*StringArray `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FoldHTTPResponse) Reset() {
	*x = FoldHTTPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FoldHTTPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FoldHTTPResponse) ProtoMessage() {}

func (x *FoldHTTPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_http_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FoldHTTPResponse.ProtoReflect.Descriptor instead.
func (*FoldHTTPResponse) Descriptor() ([]byte, []int) {
	return file_http_proto_rawDescGZIP(), []int{1}
}

func (x *FoldHTTPResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *FoldHTTPResponse) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *FoldHTTPResponse) GetHeaders() map[string]*StringArray {
	if x != nil {
		return x.Headers
	}
	return nil
}

type FoldHTTPProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The full string name of the protocol, e.g. HTTP/2.0
	Proto string `protobuf:"bytes,1,opt,name=proto,proto3" json:"proto,omitempty"`
	// The major version of the HTTP protocol, e.g. 2
	Major int32 `protobuf:"varint,2,opt,name=major,proto3" json:"major,omitempty"`
	// The minor version of the hTTP protocol, e.g. 2
	Minor int32 `protobuf:"varint,3,opt,name=minor,proto3" json:"minor,omitempty"`
}

func (x *FoldHTTPProto) Reset() {
	*x = FoldHTTPProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FoldHTTPProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FoldHTTPProto) ProtoMessage() {}

func (x *FoldHTTPProto) ProtoReflect() protoreflect.Message {
	mi := &file_http_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FoldHTTPProto.ProtoReflect.Descriptor instead.
func (*FoldHTTPProto) Descriptor() ([]byte, []int) {
	return file_http_proto_rawDescGZIP(), []int{2}
}

func (x *FoldHTTPProto) GetProto() string {
	if x != nil {
		return x.Proto
	}
	return ""
}

func (x *FoldHTTPProto) GetMajor() int32 {
	if x != nil {
		return x.Major
	}
	return 0
}

func (x *FoldHTTPProto) GetMinor() int32 {
	if x != nil {
		return x.Minor
	}
	return 0
}

type StringArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *StringArray) Reset() {
	*x = StringArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringArray) ProtoMessage() {}

func (x *StringArray) ProtoReflect() protoreflect.Message {
	mi := &file_http_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringArray.ProtoReflect.Descriptor instead.
func (*StringArray) Descriptor() ([]byte, []int) {
	return file_http_proto_rawDescGZIP(), []int{3}
}

func (x *StringArray) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

var File_http_proto protoreflect.FileDescriptor

var file_http_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x68, 0x74,
	0x74, 0x70, 0x22, 0xa2, 0x06, 0x0a, 0x0f, 0x46, 0x6f, 0x6c, 0x64, 0x48, 0x54, 0x54, 0x50, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x68, 0x74,
	0x74, 0x70, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x48, 0x54, 0x54, 0x50, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x52, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x77, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x61, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x68, 0x74,
	0x74, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x48, 0x54, 0x54, 0x50, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x75,
	0x72, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x55, 0x72, 0x69, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12,
	0x3c, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x48, 0x54, 0x54, 0x50,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x46, 0x0a,
	0x0b, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x48, 0x54,
	0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x61, 0x74, 0x68, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x49, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68, 0x74,
	0x74, 0x70, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0x4d, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x61, 0x74, 0x68, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x51, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x74, 0x74, 0x70,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcc, 0x01, 0x0a, 0x10, 0x46, 0x6f, 0x6c, 0x64,
	0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x3d, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x74, 0x74, 0x70,
	0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x4d, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x51, 0x0a, 0x0d, 0x46, 0x6f, 0x6c, 0x64, 0x48, 0x54,
	0x54, 0x50, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61,
	0x6a, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x22, 0x25, 0x0a, 0x0b, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x2a, 0x72, 0x0a, 0x0e, 0x46, 0x6f, 0x6c, 0x64, 0x48, 0x54, 0x54, 0x50, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48,
	0x45, 0x41, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x02, 0x12,
	0x07, 0x0a, 0x03, 0x50, 0x55, 0x54, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10,
	0x05, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x06, 0x12, 0x09,
	0x0a, 0x05, 0x54, 0x52, 0x41, 0x43, 0x45, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x41, 0x54,
	0x43, 0x48, 0x10, 0x08, 0x42, 0x21, 0x5a, 0x1f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x66, 0x6f, 0x6c, 0x64, 0x73, 0x68, 0x2f, 0x66, 0x6f, 0x6c, 0x64, 0x2f, 0x6d,
	0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_http_proto_rawDescOnce sync.Once
	file_http_proto_rawDescData = file_http_proto_rawDesc
)

func file_http_proto_rawDescGZIP() []byte {
	file_http_proto_rawDescOnce.Do(func() {
		file_http_proto_rawDescData = protoimpl.X.CompressGZIP(file_http_proto_rawDescData)
	})
	return file_http_proto_rawDescData
}

var file_http_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_http_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_http_proto_goTypes = []interface{}{
	(FoldHTTPMethod)(0),      // 0: http.FoldHTTPMethod
	(*FoldHTTPRequest)(nil),  // 1: http.FoldHTTPRequest
	(*FoldHTTPResponse)(nil), // 2: http.FoldHTTPResponse
	(*FoldHTTPProto)(nil),    // 3: http.FoldHTTPProto
	(*StringArray)(nil),      // 4: http.StringArray
	nil,                      // 5: http.FoldHTTPRequest.HeadersEntry
	nil,                      // 6: http.FoldHTTPRequest.PathParamsEntry
	nil,                      // 7: http.FoldHTTPRequest.QueryParamsEntry
	nil,                      // 8: http.FoldHTTPResponse.HeadersEntry
}
var file_http_proto_depIdxs = []int32{
	0, // 0: http.FoldHTTPRequest.http_method:type_name -> http.FoldHTTPMethod
	3, // 1: http.FoldHTTPRequest.http_proto:type_name -> http.FoldHTTPProto
	5, // 2: http.FoldHTTPRequest.headers:type_name -> http.FoldHTTPRequest.HeadersEntry
	6, // 3: http.FoldHTTPRequest.path_params:type_name -> http.FoldHTTPRequest.PathParamsEntry
	7, // 4: http.FoldHTTPRequest.query_params:type_name -> http.FoldHTTPRequest.QueryParamsEntry
	8, // 5: http.FoldHTTPResponse.headers:type_name -> http.FoldHTTPResponse.HeadersEntry
	4, // 6: http.FoldHTTPRequest.HeadersEntry.value:type_name -> http.StringArray
	4, // 7: http.FoldHTTPRequest.QueryParamsEntry.value:type_name -> http.StringArray
	4, // 8: http.FoldHTTPResponse.HeadersEntry.value:type_name -> http.StringArray
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_http_proto_init() }
func file_http_proto_init() {
	if File_http_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_http_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FoldHTTPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FoldHTTPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FoldHTTPProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_http_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_http_proto_goTypes,
		DependencyIndexes: file_http_proto_depIdxs,
		EnumInfos:         file_http_proto_enumTypes,
		MessageInfos:      file_http_proto_msgTypes,
	}.Build()
	File_http_proto = out.File
	file_http_proto_rawDesc = nil
	file_http_proto_goTypes = nil
	file_http_proto_depIdxs = nil
}
